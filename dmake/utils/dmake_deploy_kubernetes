#!/bin/bash
#
# Usage:
# dmake_deploy_kubernetes DMAKE_TMP_DIR KUBE_CONTEXT NAMESPACE SERVICE_NAME ARGS...
#
# Result:
# Deploy resources on kubernetes, using ARGS as kubernetes manifest yaml files.
# NAMESPACE can be emply, meaning using default namespace defined in KUBE_CONTEXT

test "${DMAKE_DEBUG}" = "1" && set -x

set -e

if [ $# -lt 6 ]; then
  dmake_fail "$0: Wrong arguments"
  echo "exit 1"
  exit 1
fi

TMP_DIR=$1; shift
CONTEXT=$1; shift
NAMESPACE=$1; shift
SERVICE=$1; shift

BASE_ARGS=( --context=${CONTEXT} ${NAMESPACE:+--namespace=${NAMESPACE}} )

FILES_NO_PRUNING_ARGS=( )
FILES_ARGS=( )
for file in "$@"; do
  if [[ "${file}" == "no-pruning:"* ]]; then
    FILES_NO_PRUNING_ARGS+=( --filename="${TMP_DIR}/${file#no-pruning:}" )
  else
    FILES_ARGS+=( --filename="${TMP_DIR}/${file}" )
  fi
done


function echo_title() {
  echo
  echo [DMake] "$@"
}

# use kubecolor if it exists, in replacement of kubectl
KUBECTL=( kubectl )
if [ -x "$(command -v kubecolor)" ]; then
  KUBECTL=( kubecolor --force-colors )
fi

echo_title Apply ${SERVICE} to kubernetes cluster ${CONTEXT}:

# --record=false allows to specify `kubernetes.io/change-cause` annotation from the manifest files
APPLY_BASE_ARGS=( "${BASE_ARGS[@]}" apply --record=false --output=yaml )
if [[ "${DMAKE_K8S_DRY_RUN}" == "1" ]]; then
  APPLY_BASE_ARGS+=( --dry-run=server )
fi

# first, non-pruned resources
if [ ${#FILES_NO_PRUNING_ARGS[@]} -ne 0 ]; then
  APPLY_NO_PRUNING_ARGS=( "${APPLY_BASE_ARGS[@]}" "${FILES_NO_PRUNING_ARGS[@]}" )

  echo kubectl "${APPLY_NO_PRUNING_ARGS[@]}"
  ${KUBECTL[@]} "${APPLY_NO_PRUNING_ARGS[@]}"
fi

# second, normal resources (we prune them)
if [ ${#FILES_ARGS[@]} -ne 0 ]; then
  SELECTOR="dmake.deepomatic.com/service=${SERVICE},dmake.deepomatic.com/prune!=no-pruning"
  APPLY_ARGS=( "${APPLY_BASE_ARGS[@]}" --prune=true --cascade=true --selector="${SELECTOR}" "${FILES_ARGS[@]}" )

  echo kubectl "${APPLY_ARGS[@]}"
  ${KUBECTL[@]} "${APPLY_ARGS[@]}"
fi

if [[ "${DMAKE_K8S_DRY_RUN}" == "1" ]]; then
  echo "dry-run, exiting"
  exit
fi

echo_title Wait rollout for ${SERVICE} Deployment on kubernetes cluster ${CONTEXT}:

# 0 and negative values don't seem very consistent depending on the type of wait command
# - argo rollout status: 0 is forever
# - rollout status deployment: 0 is never
# - kubectl wait: 0 means check once, negative value means forever
# IMPORTANT: don't use those values and prefer to set a real value (long one if wants forever) to get a consistent behavior
# Timeout could eventually be encoded in the annotation instead of true/false
TIMEOUT=${DMAKE_WAIT_TIMEOUT:-10m} # Default to one day

DEPLOYMENTS=( $(kubectl "${BASE_ARGS[@]}" get deployment --selector=dmake.deepomatic.com/service=${SERVICE},dmake.deepomatic.com/wait=true --output=jsonpath={.items..metadata.name}) )
for DEPLOYMENT in ${DEPLOYMENTS[@]}; do
  ROLLOUT_STATUS_ARGS=( "${BASE_ARGS[@]}" rollout status --watch=true --timeout ${TIMEOUT} deployment/${DEPLOYMENT} )
  echo kubectl "${ROLLOUT_STATUS_ARGS[@]}"
  ${KUBECTL[@]} "${ROLLOUT_STATUS_ARGS[@]}"
done


JOBS=( $(kubectl "${BASE_ARGS[@]}" get job --selector=dmake.deepomatic.com/service=${SERVICE},dmake.deepomatic.com/wait=true --output=jsonpath={.items..metadata.name}) )
echo $JOBS
for JOB in ${JOBS[@]}; do
  WAIT_FOR_ARGS=( "${BASE_ARGS[@]}" wait --for=condition=complete --timeout ${TIMEOUT} job/${JOB} )
  echo kubectl "${WAIT_FOR_ARGS[@]}"
  ${KUBECTL[@]} "${WAIT_FOR_ARGS[@]}"
done

# if argo rollouts setup in cluster, wait for those too
if kubectl "${BASE_ARGS[@]}" api-resources -o name | grep -q rollouts.argoproj.io; then
  echo_title Wait rollout for ${SERVICE} Rollout on kubernetes cluster ${CONTEXT}:

  ROLLOUTS=( $(kubectl "${BASE_ARGS[@]}" get rollouts --selector=dmake.deepomatic.com/service=${SERVICE},dmake.deepomatic.com/wait=true --output=jsonpath={.items..metadata.name}) )
  if [ -x "$(command -v kubectl-argo-rollouts)" ]; then
    for ROLLOUT in ${ROLLOUTS[@]}; do
      ROLLOUT_STATUS_ARGS=( argo rollouts "${BASE_ARGS[@]}" status --timeout ${TIMEOUT} --watch=true ${ROLLOUT} )
      echo kubectl "${ROLLOUT_STATUS_ARGS[@]}"
      ${KUBECTL[@]} "${ROLLOUT_STATUS_ARGS[@]}"
    done
  else
    echo "WARNING: missing 'kubectl-argo-rollouts' command, cannot properly wait on Argo Rollout. Will just 'get rollouts', not wait on completion..."
    for ROLLOUT in ${ROLLOUTS[@]}; do
      ROLLOUT_GET_ARGS=( "${BASE_ARGS[@]}" get rollout/${ROLLOUT} )
      echo kubectl "${ROLLOUT_GET_ARGS[@]}"
      ${KUBECTL[@]} "${ROLLOUT_GET_ARGS[@]}"
    done
  fi
fi

echo_title New state of ${SERVICE} on kubernetes cluster ${CONTEXT}:
GET_ARGS=( "${BASE_ARGS[@]}" get --output=wide "${FILES_NO_PRUNING_ARGS[@]}" "${FILES_ARGS[@]}" )
echo kubectl "${GET_ARGS[@]}"
${KUBECTL[@]} "${GET_ARGS[@]}"
