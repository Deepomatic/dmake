#!/usr/bin/env python3
#
# Usage:
# dmake_deploy_k8s_cd DMAKE_TMP_DIR KUBE_CONTEXT NAMESPACE APP_NAME SERVICE_NAME IMAGE_NAME CONFIGMAP_ENV_FILE SELECTORS
#
# Result:
# Finds the k8s deployments running the image (those having label dmake_${SERVICE_NAME})
# and update the image.

import os
import sys
import kubernetes
from kubernetes.client.rest import ApiException
import time
import yaml
from multiprocessing.pool import ThreadPool

import logging
FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(level=logging.INFO, format=FORMAT)
logger = logging.getLogger(__name__)


if len(sys.argv) < 8:
    logger.critical("Missing args. Should be %s DMAKE_TMP_DIR KUBE_CONTEXT NAMESPACE SERVICE_NAME IMAGE_NAME SELECTORS" % sys.argv[0])
    sys.exit(1)

tmp_dir   = sys.argv[1]
context   = sys.argv[2]
namespace = sys.argv[3]
app_name  = sys.argv[4]
service   = sys.argv[5]
image     = sys.argv[6]
configmap_env_file = sys.argv[7]
selectors = sys.argv[8]

# config
WAIT_POLL_INTERVAL = 1  # seconds
PARALLEL_UPDATE_THREAD_POOL_SIZE = 10  # number of Deployments being updated in parallel

kubernetes.config.load_kube_config(context=context)

if os.getenv('DMAKE_DEBUG') == '1':
    configuration = kubernetes.client.Configuration.get_default_copy()
    configuration.debug = True
    kubernetes.client.Configuration.set_default(configuration)
    logger.setLevel(logging.DEBUG)

# check existing env ConfigMap
v1_client = kubernetes.client.CoreV1Api()
apps_v1_client = kubernetes.client.AppsV1Api()

with open(configmap_env_file) as f:
    configmap = yaml.safe_load(f)
configmap_env_name = configmap['metadata']['name']

create_configmap_env = True
try:
    api_response = v1_client.read_namespaced_config_map(configmap_env_name, namespace)
    assert configmap['data'] == api_response.data, 'ConfigMap name should be unique per environment (configmap/%s)' % (configmap_env_name)
    create_configmap_env = False
except ApiException as e:
    if e.status != 404:
        raise
# create env ConfigMap if needed
if create_configmap_env:
    logger.info("Creating new ConfigMap Environment %s" % (configmap_env_name))
    v1_client.create_namespaced_config_map(namespace, configmap)

# also create/update DMake metadata ConfigMap defining default ConfigMap env, and image
dmake_cm_name = 'dmake-metadata-%s' % (service)
dmake_cm_data = {
    'ConfigMapEnvName': configmap_env_name,
    'Image': image
}
op_dmake_cm = None
try:
    api_response = v1_client.read_namespaced_config_map(dmake_cm_name, namespace)
    if api_response.data != dmake_cm_data:
        op_dmake_cm = 'update'
except ApiException as e:
    if e.status == 404:
        op_dmake_cm = 'create'
    else:
        raise
if op_dmake_cm is not None:
    dmake_cm_metadata = {'name': dmake_cm_name,
                         'labels': {
                             'app': service,
                             'product': app_name
                         }}
    dmake_cm = kubernetes.client.V1ConfigMap(data=dmake_cm_data, metadata=dmake_cm_metadata)
    logger.info("%s DMake metadata ConfigMap %s: %s" % (op_dmake_cm.capitalize(), dmake_cm_name, dmake_cm_data))
    if op_dmake_cm == 'create':
        v1_client.create_namespaced_config_map(namespace, dmake_cm)
    elif op_dmake_cm == 'update':
        v1_client.replace_namespaced_config_map(dmake_cm_name, namespace, dmake_cm)
    else:
        assert False


# Update Deployments
selector = "dmake_%s" % service
label_selector = selector
if selectors:
    label_selector += ',' + selectors
def get_deployments():
    ret = apps_v1_client.list_namespaced_deployment(namespace, label_selector=label_selector)
    deployments = ret.items
    return deployments

def print_deployment(deployment, msg):
    logger.debug("Deployment %s: %s" % (msg, deployment))

def patch_deployment(deployment):
    name = deployment.metadata.name
    # TODO use container name from label value (using `selector`)
    # container = deployment.metadata.labels[selector]
    assert len(deployment.spec.template.spec.containers) == 1, \
        "Multiple containers found in Pod definition; not yet supported."

    # patch container image
    json_patch = [
        {"op": "replace", "path": "/spec/template/spec/containers/0/image", "value": image}
    ]

    # patch envFrom ConfigMap
    # `env` takes precedence over `envFrom`
    # does it already use a configMap?
    existing_configmap_env_name = None
    try:
        existing_configmap_env_name = deployment.spec.template.spec.containers[0].env_from[0].config_map_ref.name
    except:
        pass
    if existing_configmap_env_name is None:
        json_patch.append({"op": "add", "path": "/spec/template/spec/containers/0/envFrom", "value": [{"configMapRef": {"name": configmap_env_name}}]})
    else:
        json_patch.append({"op": "replace", "path": "/spec/template/spec/containers/0/envFrom/0/configMapRef/name", "value": configmap_env_name})

    # do patch
    return apps_v1_client.patch_namespaced_deployment(name, namespace, json_patch)

def wait_deployment(deployment):
    name = deployment.metadata.name
    generation = deployment.metadata.generation
    old_observed_generation = deployment.status.observed_generation
    while True:
        api_response = apps_v1_client.read_namespaced_deployment(name, namespace)
        print_deployment(api_response, "wait")
        if api_response.spec.replicas == 0:
            break
        if api_response.status.observed_generation >= generation \
           and api_response.status.updated_replicas == api_response.spec.replicas:
            break
        logger.info("- Waiting for Deployment %s to be ready" % name)
        time.sleep(WAIT_POLL_INTERVAL)
    logger.info("  Deployment ready: %s" % name)


def update_deployment(deployment):
    print_deployment(deployment, "pre-patch")
    logger.info("- Updating Deployment %s" % deployment.metadata.name)
    try:
        patched_deployment = patch_deployment(deployment)
        print_deployment(patched_deployment, "patched")
        wait_deployment(patched_deployment)
    except ApiException as e:
        # ignore deployments that disappeared during loop patching
        if e.status == 404:
            logger.info("- Deployment %s disappeared during update, skipping" % deployment.metadata.name)
        else:
            raise


# Really update Deployments
logger.info("Deploying new image %s with ConfigMap env %s" % (image, configmap_env_name))


pool = ThreadPool(PARALLEL_UPDATE_THREAD_POOL_SIZE)
deployments = get_deployments()
pool.map(update_deployment, deployments)

logger.info("Finished updating Deployments with new image %s with ConfigMap env %s" % (image, configmap_env_name))
