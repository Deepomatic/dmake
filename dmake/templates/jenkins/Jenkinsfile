// default parameters from dmake repo user
//
// WARNING:
// setting DEFAULT_DMAKE_* from the caller Jenkinsfile will only fill the default values for the build form for the next execution ("build with parameters"); not the current one.
// recommentations:
// - only set DEFAUL_DMAKE_* when the value is static for the whole job (e.g. a branch/PR with the multibranch-pipeline-job)
// - for dynamic values, use OVERRIDE_DMAKE_*: it applies *after* parameters parsing, overriding them

try {
    default_dmake_app=DEFAULT_DMAKE_APP
} catch (e) {
    default_dmake_app='*'
}

try {
    default_dmake_with_dependencies=DEFAULT_DMAKE_WITH_DEPENDENCIES
} catch (e) {
    default_dmake_with_dependencies=true
}

try {
    default_dmake_command=DEFAULT_DMAKE_COMMAND
} catch (e) {
    default_dmake_command=''
}

try {
    default_dmake_skip_tests=DEFAULT_DMAKE_SKIP_TESTS
} catch (e) {
    default_dmake_skip_tests=false
}

try {
    default_dmake_debug=DEFAULT_DMAKE_DEBUG
} catch (e) {
    default_dmake_debug=false
}


try {
    default_dmake_pause_on_error_before_cleanup=DEFAULT_PAUSE_ON_ERROR_BEFORE_CLEANUP
} catch (e) {
    default_dmake_pause_on_error_before_cleanup=false
}


try {
    default_dmake_force_base_image_build=DEFAULT_DMAKE_FORCE_BASE_IMAGE_BUILD
} catch (e) {
    default_dmake_force_base_image_build=false
}

try {
    default_custom_environment=DEFAULT_CUSTOM_ENVIRONMENT
} catch (e) {
    default_custom_environment=''
}

try {
    default_clear_workspace=DEFAULT_CLEAR_WORKSPACE
} catch (e) {
    default_clear_workspace=false
}

try {
    default_abort_old_builds_on_pr=DEFAULT_ABORT_OLD_BUILDS_ON_PR
} catch (e) {
    default_abort_old_builds_on_pr=true
}

try {
    default_abort_old_builds_on_branches=DEFAULT_ABORT_OLD_BUILDS_ON_BRANCHES
} catch (e) {
    default_abort_old_builds_on_branches='' // empty list: disabled
}

try {
    default_pipeline_triggers=DEFAULT_PIPELINE_TRIGGERS
} catch (e) {
    default_pipeline_triggers=[]
}


def is_pr = !!env.CHANGE_BRANCH  // For PRs Jenkins will give the source branch name


// DMAKE_COMMAND choices
dmake_command_choices = ['build', 'test', 'deploy']

// pre-implement auto dmake_command for PR/non-PR for visual feedback on build form choices
if (! default_dmake_command) {
    default_dmake_command = is_pr ? 'test' : 'deploy'
}

// move default_dmake_command as first choice, so it's the default in the build form
dmake_command_choices = dmake_command_choices.minus(default_dmake_command)
dmake_command_choices.add(0, default_dmake_command)


properties([
    parameters([
        separator(name: "BASIC", sectionHeader: "Basic DMake parameters"),
        string(name: 'DMAKE_APP',
               defaultValue: default_dmake_app,
               description: 'DMake (application or) service to work on (deploy/test/...). Use \'*\' to force the deployment of all applications. Use \'+\' to rebuild only changed services (for PRs). Empty will fail early.'),
        booleanParam(name: 'DMAKE_WITH_DEPENDENCIES',
                     defaultValue: default_dmake_with_dependencies,
                     description: 'Also execute with service dependencies if checked'),
        choice(name: 'DMAKE_COMMAND',
               choices: dmake_command_choices,
               description: 'DMake command to execute (defaults to `test` for PR jobs, `deploy` otherwise)'),
        booleanParam(name: 'DMAKE_SKIP_TESTS',
                     defaultValue: default_dmake_skip_tests,
                     description: 'Skip tests if checked'),

        separator(name: "ADVANCED", sectionHeader: "Advanced DMake parameters"),
        booleanParam(name: 'DMAKE_DEBUG',
                     defaultValue: default_dmake_debug,
                     description: 'Enable dmake debug logs'),
        booleanParam(name: 'DMAKE_PAUSE_ON_ERROR_BEFORE_CLEANUP',
                     defaultValue: default_dmake_pause_on_error_before_cleanup,
                     description: 'Ask user confirmation before DMake cleanup.'),
        booleanParam(name: 'DMAKE_FORCE_BASE_IMAGE_BUILD',
                     defaultValue: default_dmake_force_base_image_build,
                     description: 'Force base image build (don\'t use base image cache)'),
        string(name: 'CUSTOM_ENVIRONMENT',
               defaultValue: default_custom_environment,
               description: '(optional) Custom environment variables, for custom build. Example: \'FOO=1 BAR=2\''),
        booleanParam(name: 'CLEAR_WORKSPACE',
                     defaultValue: default_clear_workspace,
                     description: 'Wipe out the workspace when starting the build if checked'),
        booleanParam(name: 'ABORT_OLD_BUILDS_ON_PR',
                     defaultValue: default_abort_old_builds_on_pr,
                     description: 'Abort old builds when job is for a PR.'),
        string(name: 'ABORT_OLD_BUILDS_ON_BRANCHES',
               defaultValue: default_abort_old_builds_on_branches,
               description: 'Abort old builds for these branches, comma separated list.'),
    ]),
    pipelineTriggers(default_pipeline_triggers)
])

// validate parameters
if (! params.DMAKE_APP) {
    error "Missing DMAKE_APP parameter: need a DMake service name"
}


// Abort old builds for PRs and branches
// from https://issues.jenkins.io/browse/JENKINS-43353?focusedCommentId=395851&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-395851
if ((is_pr && params.ABORT_OLD_BUILDS_ON_PR) || (env.BRANCH_NAME in params.ABORT_OLD_BUILDS_ON_BRANCHES.split(','))) {
  def buildNumber = env.BUILD_NUMBER as int
  if (buildNumber > 1) milestone(buildNumber - 1)
  milestone ordinal: buildNumber, label: 'Abort old builds'
}


sshagent (credentials: (env.DMAKE_JENKINS_SSH_AGENT_CREDENTIALS ?
                        env.DMAKE_JENKINS_SSH_AGENT_CREDENTIALS : '').tokenize(',')) {
    if (params.CLEAR_WORKSPACE) {
        deleteDir()
    }
    checkout([$class: 'GitSCM',
              branches: scm.branches,
              extensions: scm.extensions + [[$class: 'SubmoduleOption', recursiveSubmodules: true]],
              userRemoteConfigs: scm.userRemoteConfigs])
    // params are automatically exposed as environment variables
    // but booleans to string generates "true"
    if (params.DMAKE_DEBUG) {
        env.DMAKE_DEBUG=1
    }
    if (params.DMAKE_PAUSE_ON_ERROR_BEFORE_CLEANUP) {
        env.DMAKE_PAUSE_ON_ERROR_BEFORE_CLEANUP=1
    }

    // support post-params overrides, for dynamically setting params
    def dmake_command = params.DMAKE_COMMAND
    try {
        dmake_command = OVERRIDE_DMAKE_COMMAND
        // also handle auto dmake_command for overrides
        if (! dmake_command) {
            dmake_command = is_pr ? 'test' : 'deploy'
        }
    } catch (e) {}

    dmake_with_dependencies = params.DMAKE_WITH_DEPENDENCIES ? '--dependencies' : '--standalone'
    if (dmake_command == 'build') {
        // no dependencies supported for 'dmake build'
        dmake_with_dependencies = ''
    }


    // really: if PR and command >= test (but it's hard to test, and is currently equivalent to '== test')
    if (is_pr && dmake_command == 'test') {
        echo "First: kubernetes deploy dry-run (just plan deployment on target branch to validate kubernetes manifests templates)"
        sh "${params.CUSTOM_ENVIRONMENT} DMAKE_SKIP_TESTS=1 python3 \$(which dmake) deploy ${dmake_with_dependencies} '${params.DMAKE_APP}' --branch ${env.CHANGE_TARGET}"
        // skip execution
        echo "Kubernetes deploy dry-run finished in success!"
    }

    echo "Now really running dmake"

    def dmake_extra_args_str = ''
    def _dmake_arg_deploy_region = null
    try {
        _dmake_arg_deploy_region = dmake_arg_deploy_region
    } catch (e) {}
    if (_dmake_arg_deploy_region) {
        assert !is_pr : '"dmake_arg_deploy_region" not (yet) supported for PR builds'
        echo "Executing for deploy region '${_dmake_arg_deploy_region}'"
        dmake_extra_args_str = "--branch=${env.BRANCH_NAME}-${_dmake_arg_deploy_region}"
    }

    sh "${params.CUSTOM_ENVIRONMENT} python3 \$(which dmake) ${dmake_command} ${dmake_with_dependencies} '${params.DMAKE_APP}' ${dmake_extra_args_str}"
    load 'DMakefile'
}
