dmake_version: 0.1
app_name: dmake-test

env:
  default:
    variables:
      AMQP_URL: amqp://user:password@test-rabbitmq/dev
      SHARED_VOLUME_ROOT: /shared_volume_root_value
      ENV_EVALUATION_TEST: foobar
      ENV_OVERRIDE_TEST: "1"
      SHOULD_DEPRECATE_WARN_STRING: 1
  branches:
    master:
      variables:
        AMQP_URL: amqp://user:password@test-rabbitmq/dev

volumes:
  - shared_rabbitmq_var_lib
  - name: shared_volume_web_and_workers
  - unused_shared_volume

docker:
  root_image:
    name: ubuntu
    tag: "16.04"
  base_image:
    name: dmake-test-web-base
    install_scripts:
      - deploy/base-test-mount-secret.sh
      - deploy/dependencies.sh
    mount_secrets:
      test_secret: $PWD/test/test_secret  # this is not the canonical usage, it will break when running dmake from a subdirectory, but it works without extra setup for jenkins and developers: good for a test
    python_requirements: requirements.txt  # deprecated

services:
  - service_name: test-web
    needed_links:
      - test-rabbitmq
    needed_services:
      - service_name: test-worker:ubuntu-1604
        env:
          TEST_SHARED_VOLUME: "1"
          TEST_ENV_OVERRIDE: "1"
          ENV_OVERRIDE_TEST3: from_needed_service_env
          ENV_OVERRIDE_TEST5: from_needed_service_env
        use_host_ports: false
      - service_name: test-worker:ubuntu-1804
        link_name: test-worker-ubuntu-1804
        env:
          TEST_SHARED_VOLUME: "1"
    config:
      docker_image:
        entrypoint: deploy/entrypoint.sh
        start_script: deploy/start.sh
      ports:
        - container_port: 8000
          host_port: 9000
      readiness_probe:
        command:
          - curl
          - -sSf
          - http://localhost:8000/
          - -o
          - /dev/null
        period_seconds: 1
        max_seconds: 10
      volumes:
        - source: shared_volume_web_and_workers
          target: ${SHARED_VOLUME_ROOT}/shared_volume_with_workers
    tests:
      commands:
        - test ! -f /run/secrets/test_secret # base image secret should not be available in service image
        - test "${ENV_FROM_ENTRYPOINT}" = 'ok'
        - test "${ENV_EVALUATION_TEST}" = 'foobar' # test environment evaluation: should be evaluated in container
        - test "${ENV_OVERRIDE_TEST}" = '1' # test env override: should use the root `env` value
        - test -z "${ENV_OVERRIDE_TEST2+x}" # test env override 2: should not be set
        - touch 'tag' # test shared environment for multiple commands test
        - test -f "tag"  # test command escaping
        - deploy/test-shared-volumes.sh /shared_volume_root_value/shared_volume_with_workers
        - deploy/test-needed-service-link.sh test-worker-ubuntu-1804
        - >-
          ./manage.py test
          --verbosity=2 --noinput
          --with-coverage --cover-package=. --cover-branches --cover-erase --cover-html --cover-html-dir cover --cover-xml --cover-xml-file coverage.xml
          --with-xunit --xunit-file nosetests.xml
          --nologcapture
          --with-id
        #- lets_fail_here
        - >-
          ./manage.py test
          --verbosity=2 --noinput
          --with-xunit --xunit-file nosetests2.xml
          --nologcapture
          --with-id
      junit_report:
        - nosetests.xml
        - nosetests2.xml
      html_report:
        directory: cover/
        title: Web HTML coverage report
      cobertura_report: coverage.xml

  - service_name: test-web2
    needed_services:
      - service_name: test-worker:ubuntu-1804
        link_name: test-worker-ubuntu-1804
        env:
          TEST_SHARED_VOLUME: "1"
        needed_for:
          test: false
    needed_links:
      - test-rabbitmq
    config:
      docker_image:
        entrypoint: deploy/entrypoint.sh
        start_script: deploy/start.sh
      env_override:
        ENV_OVERRIDE_TEST: "2"
        ENV_OVERRIDE_TEST2: "3"
      ports:
        - container_port: 8000
          # no host_port: always random port
      readiness_probe:
        command:
          - curl
          - -sSf
          - http://localhost:8000/
          - -o
          - /dev/null
        period_seconds: 1
        max_seconds: 10
    tests:
      commands:
        - test "${ENV_FROM_ENTRYPOINT}" = 'ok'
        - test "${ENV_OVERRIDE_TEST}" = '2'  # test env override: should use the `env_override` value override
        - test "${ENV_OVERRIDE_TEST2}" = '3' # test env override 2: should use the `env_override` value only definition
